# router bgp <vars/main.yml:underlay_bgp.asn>
#   router_id: <vars/main.yml:underlay_bgp.router_id>
#
- name: "Ensure state of bgp for control and exchange planes"
  nxos_bgp:
    asn: "{{ underlay_bgp.asn }}"
    router_id: "{{ underlay_bgp.router_id }}"
    shutdown: "{{ underlay_bgp.states.shutdown }}"
    state: "{{ underlay_bgp.states.state }}"

#   neighbor <inventory/leaf/<inventory_hostname>:control_plane_id>
#     description <vars/main.yml:underlay_bgp.description>
#     remote-as <vars/main.yml:underlay_bgp.asn>
#     local-as <vars/main.yml:underlay_bgp.asn>
#     update-source <vars/main.yml:underlay_interfaces.control.name>
- name: "SPINE: Ensure state of bgp for control-plane between spines -> leafs"
  nxos_bgp_neighbor:
    neighbor: "{{ nxos_bgp_neighbor_leaf }}"
    asn: "{{ underlay_bgp.asn }}"
    local_as: "{{ underlay_bgp.asn }}"
    update_source: "{{ underlay_interfaces.control.name }}"
    shutdown: "{{ underlay_bgp.states.shutdown }}"
    description: "{{ underlay_bgp.description }}"
    remote_as: "{{ underlay_bgp.asn }}"
    state: "{{ underlay_bgp.states.state }}"
  with_items: "{{ groups['leaf']|map('extract', hostvars, 'control_plane_id')|list }}"
  when: inventory_hostname in groups['spine']
  loop_control:
    loop_var: nxos_bgp_neighbor_leaf
    label: "nxos_bgp_neighbor_leaf {{ nxos_bgp_neighbor_leaf }}"

- name: "SPINE: Ensure state of control-plane address-family in neighborship between spines -> leafs"
  nxos_bgp_neighbor_af:
    neighbor: "{{ nxos_bgp_neighbor_af_leaf }}"
    asn: "{{ underlay_bgp.asn }}"
    state: "{{ underlay_bgp.states.state }}"
    afi: l2vpn
    safi: evpn
    send_community: both
    route_reflector_client: true
  with_items: "{{ groups['leaf']|map('extract', hostvars, 'control_plane_id')|list }}"
  when: inventory_hostname in groups['spine']
  loop_control:
    loop_var: nxos_bgp_neighbor_af_leaf
    label: "nxos_bgp_neighbor_af_leaf {{ nxos_bgp_neighbor_af_leaf }}"

- name: "LEAF: Ensure state of control-plane bgp between leafs -> spines"
  nxos_bgp_neighbor:
    neighbor: "{{ nxos_bgp_neighbor_spine }}"
    asn: "{{ underlay_bgp.asn }}"
    local_as: "{{ underlay_bgp.asn }}"
    update_source: "{{ underlay_interfaces.control.name }}"
    shutdown: "{{ underlay_bgp.states.shutdown }}"
    description: "{{ underlay_bgp.description }}"
    remote_as: "{{ underlay_bgp.asn }}"
    state: "{{ underlay_bgp.states.state }}"
  with_items: "{{ groups['spine']|map('extract', hostvars, 'control_plane_id')|list }}"
  when: inventory_hostname in groups['leaf']
  loop_control:
    loop_var: nxos_bgp_neighbor_spine
    label: "nxos_bgp_neighbor_spine {{ nxos_bgp_neighbor_spine }}"

- name: "LEAF: Ensure state of control-plane address-family in neighborship between leafs -> spines"
  nxos_bgp_neighbor_af:
    neighbor: "{{ nxos_bgp_neighbor_af_spine }}"
    asn: "{{ underlay_bgp.asn }}"
    state: "{{ underlay_bgp.states.state }}"
    afi: l2vpn
    safi: evpn
    send_community: both
    route_reflector_client: true
  with_items: "{{ groups['spine']|map('extract', hostvars, 'control_plane_id')|list }}"
  when: inventory_hostname in groups['leaf']
  loop_control:
    loop_var: nxos_bgp_neighbor_af_spine
    label: "nxos_bgp_neighbor_af_spine {{ nxos_bgp_neighbor_af_spine }}"
